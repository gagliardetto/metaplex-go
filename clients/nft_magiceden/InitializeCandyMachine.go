// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeCandyMachine is the `initializeCandyMachine` instruction.
type InitializeCandyMachine struct {
	Args *InitializeCandyMachineArgs

	// [0] = [WRITE] candyMachine
	//
	// [1] = [WRITE] launchStagesInfo
	//
	// [2] = [WRITE] orderInfo
	//
	// [3] = [] wallet
	//
	// [4] = [] config
	//
	// [5] = [SIGNER] authority
	//
	// [6] = [WRITE, SIGNER] payer
	//
	// [7] = [] notary
	//
	// [8] = [] systemProgram
	//
	// [9] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeCandyMachineInstructionBuilder creates a new `InitializeCandyMachine` instruction builder.
func NewInitializeCandyMachineInstructionBuilder() *InitializeCandyMachine {
	nd := &InitializeCandyMachine{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *InitializeCandyMachine) SetArgs(args InitializeCandyMachineArgs) *InitializeCandyMachine {
	inst.Args = &args
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *InitializeCandyMachine) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *InitializeCandyMachine) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLaunchStagesInfoAccount sets the "launchStagesInfo" account.
func (inst *InitializeCandyMachine) SetLaunchStagesInfoAccount(launchStagesInfo ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(launchStagesInfo).WRITE()
	return inst
}

// GetLaunchStagesInfoAccount gets the "launchStagesInfo" account.
func (inst *InitializeCandyMachine) GetLaunchStagesInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOrderInfoAccount sets the "orderInfo" account.
func (inst *InitializeCandyMachine) SetOrderInfoAccount(orderInfo ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(orderInfo).WRITE()
	return inst
}

// GetOrderInfoAccount gets the "orderInfo" account.
func (inst *InitializeCandyMachine) GetOrderInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWalletAccount sets the "wallet" account.
func (inst *InitializeCandyMachine) SetWalletAccount(wallet ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wallet)
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *InitializeCandyMachine) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetConfigAccount sets the "config" account.
func (inst *InitializeCandyMachine) SetConfigAccount(config ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *InitializeCandyMachine) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeCandyMachine) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeCandyMachine) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *InitializeCandyMachine) SetPayerAccount(payer ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *InitializeCandyMachine) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetNotaryAccount sets the "notary" account.
func (inst *InitializeCandyMachine) SetNotaryAccount(notary ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(notary)
	return inst
}

// GetNotaryAccount gets the "notary" account.
func (inst *InitializeCandyMachine) GetNotaryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeCandyMachine) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeCandyMachine) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeCandyMachine) SetRentAccount(rent ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeCandyMachine) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst InitializeCandyMachine) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeCandyMachine,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeCandyMachine) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeCandyMachine) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LaunchStagesInfo is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OrderInfo is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Notary is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeCandyMachine) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeCandyMachine")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("launchStagesInfo", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       orderInfo", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          wallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          config", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          notary", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializeCandyMachine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeCandyMachine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeCandyMachineInstruction declares a new InitializeCandyMachine instruction with the provided parameters and accounts.
func NewInitializeCandyMachineInstruction(
	// Parameters:
	args InitializeCandyMachineArgs,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	launchStagesInfo ag_solanago.PublicKey,
	orderInfo ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	notary ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeCandyMachine {
	return NewInitializeCandyMachineInstructionBuilder().
		SetArgs(args).
		SetCandyMachineAccount(candyMachine).
		SetLaunchStagesInfoAccount(launchStagesInfo).
		SetOrderInfoAccount(orderInfo).
		SetWalletAccount(wallet).
		SetConfigAccount(config).
		SetAuthorityAccount(authority).
		SetPayerAccount(payer).
		SetNotaryAccount(notary).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
