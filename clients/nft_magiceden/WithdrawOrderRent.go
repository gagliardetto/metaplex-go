// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawOrderRent is the `withdrawOrderRent` instruction.
type WithdrawOrderRent struct {

	// [0] = [] candyMachine
	//
	// [1] = [WRITE] orderInfo
	//
	// [2] = [WRITE, SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawOrderRentInstructionBuilder creates a new `WithdrawOrderRent` instruction builder.
func NewWithdrawOrderRentInstructionBuilder() *WithdrawOrderRent {
	nd := &WithdrawOrderRent{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *WithdrawOrderRent) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *WithdrawOrderRent {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine)
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *WithdrawOrderRent) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOrderInfoAccount sets the "orderInfo" account.
func (inst *WithdrawOrderRent) SetOrderInfoAccount(orderInfo ag_solanago.PublicKey) *WithdrawOrderRent {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(orderInfo).WRITE()
	return inst
}

// GetOrderInfoAccount gets the "orderInfo" account.
func (inst *WithdrawOrderRent) GetOrderInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawOrderRent) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawOrderRent {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawOrderRent) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst WithdrawOrderRent) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawOrderRent,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawOrderRent) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawOrderRent) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OrderInfo is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *WithdrawOrderRent) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawOrderRent")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   orderInfo", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj WithdrawOrderRent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawOrderRent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawOrderRentInstruction declares a new WithdrawOrderRent instruction with the provided parameters and accounts.
func NewWithdrawOrderRentInstruction(
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	orderInfo ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *WithdrawOrderRent {
	return NewWithdrawOrderRentInstructionBuilder().
		SetCandyMachineAccount(candyMachine).
		SetOrderInfoAccount(orderInfo).
		SetAuthorityAccount(authority)
}
