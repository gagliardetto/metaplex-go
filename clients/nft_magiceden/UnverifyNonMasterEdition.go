// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UnverifyNonMasterEdition is the `unverifyNonMasterEdition` instruction.
type UnverifyNonMasterEdition struct {

	// [0] = [] candyMachine
	//
	// [1] = [] tokenMetadataProgram
	//
	// [2] = [] edition
	//
	// [3] = [WRITE] metadata
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUnverifyNonMasterEditionInstructionBuilder creates a new `UnverifyNonMasterEdition` instruction builder.
func NewUnverifyNonMasterEditionInstructionBuilder() *UnverifyNonMasterEdition {
	nd := &UnverifyNonMasterEdition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *UnverifyNonMasterEdition) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *UnverifyNonMasterEdition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine)
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *UnverifyNonMasterEdition) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *UnverifyNonMasterEdition) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *UnverifyNonMasterEdition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *UnverifyNonMasterEdition) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEditionAccount sets the "edition" account.
func (inst *UnverifyNonMasterEdition) SetEditionAccount(edition ag_solanago.PublicKey) *UnverifyNonMasterEdition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(edition)
	return inst
}

// GetEditionAccount gets the "edition" account.
func (inst *UnverifyNonMasterEdition) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *UnverifyNonMasterEdition) SetMetadataAccount(metadata ag_solanago.PublicKey) *UnverifyNonMasterEdition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *UnverifyNonMasterEdition) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UnverifyNonMasterEdition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UnverifyNonMasterEdition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UnverifyNonMasterEdition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UnverifyNonMasterEdition) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Metadata is not set")
		}
	}
	return nil
}

func (inst *UnverifyNonMasterEdition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UnverifyNonMasterEdition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("tokenMetadataProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             edition", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            metadata", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UnverifyNonMasterEdition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UnverifyNonMasterEdition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUnverifyNonMasterEditionInstruction declares a new UnverifyNonMasterEdition instruction with the provided parameters and accounts.
func NewUnverifyNonMasterEditionInstruction(
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	edition ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey) *UnverifyNonMasterEdition {
	return NewUnverifyNonMasterEditionInstructionBuilder().
		SetCandyMachineAccount(candyMachine).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetEditionAccount(edition).
		SetMetadataAccount(metadata)
}
