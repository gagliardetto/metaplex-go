// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PopulateOrder is the `populateOrder` instruction.
type PopulateOrder struct {
	Size *uint32

	// [0] = [] candyMachine
	//
	// [1] = [WRITE] orderInfo
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPopulateOrderInstructionBuilder creates a new `PopulateOrder` instruction builder.
func NewPopulateOrderInstructionBuilder() *PopulateOrder {
	nd := &PopulateOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *PopulateOrder) SetSize(size uint32) *PopulateOrder {
	inst.Size = &size
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *PopulateOrder) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *PopulateOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine)
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *PopulateOrder) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOrderInfoAccount sets the "orderInfo" account.
func (inst *PopulateOrder) SetOrderInfoAccount(orderInfo ag_solanago.PublicKey) *PopulateOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(orderInfo).WRITE()
	return inst
}

// GetOrderInfoAccount gets the "orderInfo" account.
func (inst *PopulateOrder) GetOrderInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *PopulateOrder) SetAuthorityAccount(authority ag_solanago.PublicKey) *PopulateOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *PopulateOrder) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst PopulateOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PopulateOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PopulateOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PopulateOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OrderInfo is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *PopulateOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PopulateOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   orderInfo", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj PopulateOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PopulateOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewPopulateOrderInstruction declares a new PopulateOrder instruction with the provided parameters and accounts.
func NewPopulateOrderInstruction(
	// Parameters:
	size uint32,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	orderInfo ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *PopulateOrder {
	return NewPopulateOrderInstructionBuilder().
		SetSize(size).
		SetCandyMachineAccount(candyMachine).
		SetOrderInfoAccount(orderInfo).
		SetAuthorityAccount(authority)
}
