// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateCandyMachine is the `updateCandyMachine` instruction.
type UpdateCandyMachine struct {
	Notary         *ag_solanago.PublicKey `bin:"optional"`
	ItemsAvailable *uint64                `bin:"optional"`

	// [0] = [WRITE] candyMachine
	//
	// [1] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateCandyMachineInstructionBuilder creates a new `UpdateCandyMachine` instruction builder.
func NewUpdateCandyMachineInstructionBuilder() *UpdateCandyMachine {
	nd := &UpdateCandyMachine{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNotary sets the "notary" parameter.
func (inst *UpdateCandyMachine) SetNotary(notary ag_solanago.PublicKey) *UpdateCandyMachine {
	inst.Notary = &notary
	return inst
}

// SetItemsAvailable sets the "itemsAvailable" parameter.
func (inst *UpdateCandyMachine) SetItemsAvailable(itemsAvailable uint64) *UpdateCandyMachine {
	inst.ItemsAvailable = &itemsAvailable
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *UpdateCandyMachine) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *UpdateCandyMachine {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *UpdateCandyMachine) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateCandyMachine) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateCandyMachine {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateCandyMachine) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateCandyMachine) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateCandyMachine,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateCandyMachine) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateCandyMachine) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *UpdateCandyMachine) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateCandyMachine")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Notary (OPT)", inst.Notary))
						paramsBranch.Child(ag_format.Param("ItemsAvailable (OPT)", inst.ItemsAvailable))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateCandyMachine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Notary` param (optional):
	{
		if obj.Notary == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Notary)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ItemsAvailable` param (optional):
	{
		if obj.ItemsAvailable == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ItemsAvailable)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateCandyMachine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Notary` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Notary)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ItemsAvailable` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ItemsAvailable)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateCandyMachineInstruction declares a new UpdateCandyMachine instruction with the provided parameters and accounts.
func NewUpdateCandyMachineInstruction(
	// Parameters:
	notary ag_solanago.PublicKey,
	itemsAvailable uint64,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *UpdateCandyMachine {
	return NewUpdateCandyMachineInstructionBuilder().
		SetNotary(notary).
		SetItemsAvailable(itemsAvailable).
		SetCandyMachineAccount(candyMachine).
		SetAuthorityAccount(authority)
}
