// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateLaunchStages is the `updateLaunchStages` instruction.
type UpdateLaunchStages struct {
	Stages *[]LaunchStage

	// [0] = [WRITE] launchStagesInfo
	//
	// [1] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateLaunchStagesInstructionBuilder creates a new `UpdateLaunchStages` instruction builder.
func NewUpdateLaunchStagesInstructionBuilder() *UpdateLaunchStages {
	nd := &UpdateLaunchStages{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetStages sets the "stages" parameter.
func (inst *UpdateLaunchStages) SetStages(stages []LaunchStage) *UpdateLaunchStages {
	inst.Stages = &stages
	return inst
}

// SetLaunchStagesInfoAccount sets the "launchStagesInfo" account.
func (inst *UpdateLaunchStages) SetLaunchStagesInfoAccount(launchStagesInfo ag_solanago.PublicKey) *UpdateLaunchStages {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(launchStagesInfo).WRITE()
	return inst
}

// GetLaunchStagesInfoAccount gets the "launchStagesInfo" account.
func (inst *UpdateLaunchStages) GetLaunchStagesInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateLaunchStages) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateLaunchStages {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateLaunchStages) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateLaunchStages) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateLaunchStages,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateLaunchStages) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateLaunchStages) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Stages == nil {
			return errors.New("Stages parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LaunchStagesInfo is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *UpdateLaunchStages) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateLaunchStages")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Stages", *inst.Stages))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("launchStagesInfo", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateLaunchStages) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Stages` param:
	err = encoder.Encode(obj.Stages)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateLaunchStages) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Stages`:
	err = decoder.Decode(&obj.Stages)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateLaunchStagesInstruction declares a new UpdateLaunchStages instruction with the provided parameters and accounts.
func NewUpdateLaunchStagesInstruction(
	// Parameters:
	stages []LaunchStage,
	// Accounts:
	launchStagesInfo ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *UpdateLaunchStages {
	return NewUpdateLaunchStagesInstructionBuilder().
		SetStages(stages).
		SetLaunchStagesInfoAccount(launchStagesInfo).
		SetAuthorityAccount(authority)
}
