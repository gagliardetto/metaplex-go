// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_magiceden

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CheckRaffleTicket is the `checkRaffleTicket` instruction.
type CheckRaffleTicket struct {

	// [0] = [] config
	//
	// [1] = [] candyMachine
	//
	// [2] = [] launchStagesInfo
	//
	// [3] = [] raffleTicket
	//
	// [4] = [] payer
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCheckRaffleTicketInstructionBuilder creates a new `CheckRaffleTicket` instruction builder.
func NewCheckRaffleTicketInstructionBuilder() *CheckRaffleTicket {
	nd := &CheckRaffleTicket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetConfigAccount sets the "config" account.
func (inst *CheckRaffleTicket) SetConfigAccount(config ag_solanago.PublicKey) *CheckRaffleTicket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CheckRaffleTicket) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *CheckRaffleTicket) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *CheckRaffleTicket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(candyMachine)
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *CheckRaffleTicket) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLaunchStagesInfoAccount sets the "launchStagesInfo" account.
func (inst *CheckRaffleTicket) SetLaunchStagesInfoAccount(launchStagesInfo ag_solanago.PublicKey) *CheckRaffleTicket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(launchStagesInfo)
	return inst
}

// GetLaunchStagesInfoAccount gets the "launchStagesInfo" account.
func (inst *CheckRaffleTicket) GetLaunchStagesInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRaffleTicketAccount sets the "raffleTicket" account.
func (inst *CheckRaffleTicket) SetRaffleTicketAccount(raffleTicket ag_solanago.PublicKey) *CheckRaffleTicket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(raffleTicket)
	return inst
}

// GetRaffleTicketAccount gets the "raffleTicket" account.
func (inst *CheckRaffleTicket) GetRaffleTicketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *CheckRaffleTicket) SetPayerAccount(payer ag_solanago.PublicKey) *CheckRaffleTicket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer)
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CheckRaffleTicket) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CheckRaffleTicket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CheckRaffleTicket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CheckRaffleTicket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CheckRaffleTicket) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LaunchStagesInfo is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RaffleTicket is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
	}
	return nil
}

func (inst *CheckRaffleTicket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CheckRaffleTicket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    candyMachine", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("launchStagesInfo", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    raffleTicket", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CheckRaffleTicket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CheckRaffleTicket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCheckRaffleTicketInstruction declares a new CheckRaffleTicket instruction with the provided parameters and accounts.
func NewCheckRaffleTicketInstruction(
	// Accounts:
	config ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	launchStagesInfo ag_solanago.PublicKey,
	raffleTicket ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CheckRaffleTicket {
	return NewCheckRaffleTicketInstructionBuilder().
		SetConfigAccount(config).
		SetCandyMachineAccount(candyMachine).
		SetLaunchStagesInfoAccount(launchStagesInfo).
		SetRaffleTicketAccount(raffleTicket).
		SetPayerAccount(payer)
}
